def create_database():
    postgre_database = '''
    drop table if exists word_learning;
    drop table if exists word_usage;
    drop table if exists word ;
    drop table if exists users_list ;
    drop table if exists list_rating;
    drop table if exists user_added_list;
    drop table if exists word_list cascade ;
    drop table if exists user_db cascade;


    create table user_db(
        user_login varchar(30) PRIMARY KEY,
        user_password varchar(255) NOT NULL,
        user_name varchar(50) DEFAULT 'NoName'
                    );

    create table word_list(
        id_list INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
        name_list varchar(30) NOT NULL,
        user_login varchar(30) NOT NULL,
        is_public BOOLEAN DEFAULT FALSE,
        FOREIGN KEY(user_login) REFERENCES user_db(user_login)
    );

    create table user_added_list(
        id_list int NOT NULL,
        user_login varchar(30) NOT NULL,
        FOREIGN KEY(id_list) REFERENCES word_list(id_list),
        FOREIGN KEY(user_login) REFERENCES user_db(user_login),
        PRIMARY KEY(id_list, user_login)
    );

    create table list_rating
    (
        rating_value real DEFAULT 0.0,
        id_list int NOT NULL,
        user_login varchar(30) NOT NULL,
        FOREIGN KEY (id_list) REFERENCES word_list (id_list),
        FOREIGN KEY (user_login) REFERENCES user_db (user_login),
        PRIMARY KEY (id_list, user_login)
    );

    create table word(
        word_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
        word_name varchar(60) NOT NULL,
        word_translation varchar(60) NOT NULL,
        id_list INT NOT NULL,
        FOREIGN KEY(id_list) REFERENCES word_list(id_list)
    );

    create table word_usage(
        word_example_id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
        usage_example text,
        example_translation text,
        word_id INT NOT NULL,
        FOREIGN KEY(word_id) REFERENCES word(word_id)
    );

    create table word_learning(
        stage INT NOT NULL,
        date_gain_stage timestamp NOT NULL,
        user_login varchar(30) NOT NULL,
        word_id INT NOT NULL,
        FOREIGN KEY(word_id) REFERENCES word(word_id),
        FOREIGN KEY(user_login) REFERENCES user_db(user_login),
        PRIMARY KEY(word_id, user_login)
    );


    DROP FUNCTION IF EXISTS noexample();
    CREATE FUNCTION noexample() RETURNS TRIGGER AS $updatenoexample$
    BEGIN
        IF NEW.usage_example = '' THEN
            UPDATE word_usage SET usage_example = 'NoExample' WHERE word_example_id = NEW.word_example_id;
        END IF;
        IF NEW.example_translation = '' THEN
            UPDATE word_usage SET example_translation = 'NoExample'WHERE word_example_id = NEW.word_example_id;
        END IF;

        RETURN NEW;

        END;
    $updatenoexample$ LANGUAGE plpgsql;

    CREATE TRIGGER updatenoexample
    AFTER INSERT ON word_usage
    FOR EACH ROW
    EXECUTE PROCEDURE noexample();
    '''